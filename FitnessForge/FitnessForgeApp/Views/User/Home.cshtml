@using FitnessForgeApp.Models.ViewModels
@using System.Web
@using FitnessForgeApp.Services
@inject Microsoft.AspNetCore.Identity.UserManager<ApplicationUser> userManager;
@inject UserService userService;
@model List<UserHomeViewModel>
@{
    List<MealType>? mealTypes = (List<MealType>?)ViewData["mealTypes"];
    ApplicationUser? user = await userManager.GetUserAsync(User);

    int roundingNumber = 2;

    var sugarTotal = Model.Sum(x => x.Sugar);
    var carbohydrateTotal = Model.Sum(x => x.Carbohydrate) - sugarTotal;
    var proteinTotal = Model.Sum(x => x.Protein);
    var saturatedFatTotal = Model.Sum(x => x.SaturatedFat);
    var fatTotal = Model.Sum(x => x.Fat) - saturatedFatTotal;
    var saltTotal = Model.Sum(x => x.Salt);
    var fiberTotal = Model.Sum(x => x.Fiber);

    var breakfastTotal = Model[0].Calorie;
    var brunchTotal = Model[1].Calorie;
    var lunchTotal = Model[2].Calorie;
    var snackTotal = Model[3].Calorie;
    var dinnerTotal = Model[4].Calorie;
}

    @if (ViewData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger" role="alert">
            @ViewData["ErrorMessage"]
        </div>
    }

<div class="container bg-gray rounded-3 p-3">
    <div class="row mt-2 text-center">
        <div class="col-lg-4 col-sm-12">
            <h5 class="text-orange fw-bold">Tápanyag eloszlás (g)</h5>
             <div class="row mb-1 fw-bold">
                <div class="col-3" style="background-color: rgba(255, 99, 132, 0.6)">
                     <p>Szénhidrát</p>
                 </div>
                <div class="col-3" style="background-color: rgba(255, 205, 86, 0.6)">
                    <p>Fehérje</p>
                </div>
                <div class="col-3" style="background-color: rgba(75, 192, 192, 0.6)">
                    <p>Zsír</p>
                </div>
                <div class="col-3" style="background-color: rgba(255, 159, 64, 0.6)">
                    <p>Cukor</p>
                </div>
             </div>
             <div class="row fw-bold">
                <div class="col-4" style="background-color: rgba(153, 102, 255, 0.6)">
                     <p>Telített zsír</p>
                 </div>
                <div class="col-4" style="background-color: rgba(54, 162, 235, 0.6)">
                    <p>Só</p>
                </div>
                <div class="col-4" style="background-color: rgba(201, 203, 207, 0.6)">
                    <p>Rost</p>
                </div>
             </div>
            <div class="chart-container d-flex justify-content-center">
                <canvas id="chart"></canvas>
            </div>
        </div>
        <div class="col-lg-4 col-sm-12">
            <div class="card rounded-3 bg-red">
                <div class="card-body bg-red text-orange">
                    <h3 class="card-title fw-bolder">@DateTime.Today.ToShortDateString()</h3>
                    <h5 class="card-subtitle mb-2 fw-bolder">@Math.Round(Model.Sum(x => x.Calorie), roundingNumber) kcal / @Math.Round(userService.UserDailyCalorie(user), 0) kcal</h5>
                    </div>
                    <ul class="list-group list-group-flush">
                    <li class="list-group-item bg-red text-orange fw-bold">Szénhidrát: @Math.Round(Model.Sum(x => x.Carbohydrate), roundingNumber) g / @Math.Round(userService.UserDailyNutrients(user)[0], 0) g</li>
                    <li class="list-group-item bg-red text-orange fw-bold">Fehérje: @Math.Round(Model.Sum(x => x.Protein), roundingNumber) g / @Math.Round(userService.UserDailyNutrients(user)[1], 0) g</li>
                    <li class="list-group-item bg-red text-orange fw-bold">Zsír: @Math.Round(Model.Sum(x => x.Fat), roundingNumber) g / @Math.Round(userService.UserDailyNutrients(user)[2], 0) g</li>
                    </ul>
                </div>
            </div>
        <div class="col-lg-4 col-sm-12">
            <h5 class="text-orange fw-bold">Kalória étkezésenként (kcal)</h5>
            <div class="row fw-bold mb-1">
                <div class="col-4" style="background-color:rgba(255, 99, 132, 0.6)">
                    <p>Reggeli</p>
                </div>
                <div class="col-4" style="background-color:rgba(54, 162, 235, 0.6)">
                    <p>Tízórai</p>
                </div>
                <div class="col-4" style="background-color:rgba(255, 205, 86, 0.6)">
                    <p>Ebéd</p>
                </div>
            </div>
            <div class="row fw-bold">
                <div class="col-6" style="background-color:rgba(75, 192, 192, 0.6)">
                    <p>Uzsonna</p>
                </div>
                <div class="col-6" style="background-color:rgba(153, 102, 255, 0.6)">
                    <p>Vacsora</p>
                </div>
            </div>
            <div class="chart-container d-flex justify-content-center">
                <canvas id="caloriesChart"></canvas>
            </div>
        </div>
    </div>
        <div class="row mt-3 text-center">
            <h4 class="text-orange fw-bold">Étkezések</h4>
                @for (int i = 0; i < mealTypes.Count; i++)
                {
                <div class="col-lg-2 col-sm-12 @(i == 0 ? "offset-lg-1" : "") mt-1">
                    <div class="card rounded-3 bg-red">
                        <img src="/images/meals/@(mealTypes[i].Name.ToLower()).jpg" class="card-img-top rounded-3" alt="@mealTypes[i].Name.ToLower()">
                        <div class="card-body bg-red text-orange">
                        <h5 class="card-title fw-bolder">@mealTypes[i].Name</h5>
                        <h6 class="card-subtitle mb-2 fw-bolder">@Math.Round(Model[i].Calorie, roundingNumber) kcal</h6>
                        </div>
                        <ul class="list-group list-group-flush">
                        <li class="list-group-item bg-red text-orange fw-bold">Szénhidrát: @Math.Round(Model[i].Carbohydrate, roundingNumber) g</li>
                        <li class="list-group-item bg-red text-orange fw-bold">Fehérje: @Math.Round(Model[i].Protein, roundingNumber) g</li>
                        <li class="list-group-item bg-red text-orange fw-bold">Zsír: @Math.Round(Model[i].Fat, roundingNumber) g</li>
                        </ul>
                        <div class="card-body">
                            <form asp-action="EditIntake" asp-controller="Meal" method="get" class="card-link">
                                <input value="@mealTypes[i].Name" type="hidden" name="mealType" />
                                <button class="btn btn-success rounded-circle text-center" type="submit">
                                <i class="fa-solid fa-plus"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
                }
        </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js"></script>
<script defer>
    document.addEventListener('DOMContentLoaded', function () {
        const canvas = document.getElementById("chart");
        const ctx = canvas.getContext("2d");

        var sugarTotal = @sugarTotal.ToString().Replace(",",".");
        var carbohydrateTotal = @carbohydrateTotal.ToString().Replace(",", ".");
        var proteinTotal = @proteinTotal.ToString().Replace(",", ".");
        var saturatedFatTotal = @saturatedFatTotal.ToString().Replace(",", ".");
        var fatTotal = @fatTotal.ToString().Replace(",", ".");
        var saltTotal = @saltTotal.ToString().Replace(",", ".");
        var fiberTotal = @fiberTotal.ToString().Replace(",", ".");

        const labels = ['Szénhidrát', 'Cukor', 'Fehérje', 'Zsír', 'Telített zsír', 'Só', 'Rost'];
        const data = [carbohydrateTotal, sugarTotal, proteinTotal, fatTotal, saturatedFatTotal, saltTotal, fiberTotal];

        const backgroundColors = [
            'rgba(255, 99, 132, 0.6)', // Szénhidrát
            'rgba(255, 159, 64, 0.6)', // Cukor
            'rgba(255, 205, 86, 0.6)', // Fehérje
            'rgba(75, 192, 192, 0.6)', // Zsír
            'rgba(153, 102, 255, 0.6)', // Telített Zsír
            'rgba(54, 162, 235, 0.6)', // Só
            'rgba(201, 203, 207, 0.6)' // Rost
        ];

        const dataset = {
            data: data,
            backgroundColor: backgroundColors
        };

        const options = {
            plugins: {
                title: {
                    display: false
                },
                legend: {
                    display: false
                }
            }
        };

        var myChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: labels,
                datasets: [dataset]
            },
            options: options
        });
    });


    document.addEventListener('DOMContentLoaded', function () {
        const canvas = document.getElementById("caloriesChart");
        const ctx = canvas.getContext("2d");

        var breakfastTotal = @breakfastTotal.ToString().Replace(",", ".")
        var brunchTotal = @brunchTotal.ToString().Replace(",", ".")
        var lunchTotal = @lunchTotal.ToString().Replace(",", ".")
        var snackTotal = @snackTotal.ToString().Replace(",", ".")
        var dinnerTotal = @dinnerTotal.ToString().Replace(",", ".")

        const mealNames = ["Reggeli","Tízórai","Ebéd","Uzsonna","Vacsora"];
        const calorieData = [
            breakfastTotal,
            brunchTotal,
            lunchTotal,
            snackTotal,
            dinnerTotal
        ];

        const dataset = {
            data: calorieData,
            backgroundColor: [
                'rgba(255, 99, 132, 0.6)',
                'rgba(54, 162, 235, 0.6)',
                'rgba(255, 205, 86, 0.6)',
                'rgba(75, 192, 192, 0.6)',
                'rgba(153, 102, 255, 0.6)'
            ]
        };

        var myChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: mealNames,
                datasets: [dataset]
            },
            options: {
                plugins: {
                    title: {
                        display: false
                    },
                    legend: {
                        display: false
                    }
                }
            }
        });
    });
</script>
